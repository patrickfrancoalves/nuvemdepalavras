LIBNAME FRAUDE "/dados/PLD/Modelagem_Nas/Risco_de_Credito/Fraude";
OPTIONS COMPRESS=YES;


/*--------------------------------------------------------------------------------*/
/*--          VERIFICAÇÃO FRACASSADA DO CRIADOR DA TABELAS EM PLD               --*/
/*--------------------------------------------------------------------------------*/


ODS TRACE ON;
ODS OUTPUT ENGINEHOST=OWNER;
PROC DATASETS LIB=PLD(WHERE=(LABEL1 IN ('FilaName','Owner Name')));
CONTENTS DATA=_ALL_;
RUN;


PROC SQL;
CREATE TABLE TEMP AS
SELECT DISTINCT Member,Label1,cValue1,NValue1 FROM OWNER
WHERE Label1 NOT LIKE '%File Size%' AND Label1 NOT LIKE '%Page%' AND Label1 NOT LIKE '%Number%' 
AND Label1<>'Filename' AND Label1<>'Host Created' AND Label1<>'Access Permission' AND cValue1<>'svc-pld'
ORDER BY LABEL1;
QUIT;


PROC SQL NOPRINT;
CREATE TABLE TEMP AS
  SELECT DISTINCT PROCESSO,SUBSTR(PROCESSO,INDEX(PROCESSO,'/')+1,4) AS TESTE
  FROM FRAUDE.OCORRENCIAFRAUDE
  ORDER BY PROCESSO;
QUIT;


PROC SQL NOPRINT;
CREATE TABLE TEMP AS
SELECT TIPO_DOCUMENTO,COUNT(*) AS TOTAL,
       SUM(VALOR_FRAUDE) AS VALOR_FRAUDE FORMAT=COMMAX20.2
  FROM FRAUDE.OCORRENCIAFRAUDE
  WHERE SUBSTR(PROCESSO,INDEX(PROCESSO,'/')+1,4)='2020'
  GROUP BY TIPO_DOCUMENTO;
QUIT;


/*--------------------------------------------------------------------------------*/
/*---         ANÁLISE DA NOVA REMESSA DA TABELA OCORRENCIA FRAUDE 2020         ---*/
/*--------------------------------------------------------------------------------*/


PROC SQL NOPRINT;
CREATE TABLE TEMP AS
SELECT TIPO_DOCUMENTO,
       CASE WHEN TIPO_DOCUMENTO='Boletos de cobrança' THEN 2
	        WHEN TIPO_DOCUMENTO='Cheque'              THEN 6
	        WHEN TIPO_DOCUMENTO='Convênio'            THEN 1
	        WHEN TIPO_DOCUMENTO='DOC'                 THEN 5
	        WHEN TIPO_DOCUMENTO='Depósito'            THEN 8
	        WHEN TIPO_DOCUMENTO='Recarga'             THEN 9
			WHEN TIPO_DOCUMENTO='Saque'               THEN 7
			WHEN TIPO_DOCUMENTO='TEC (Intercredis)'   THEN 4
			WHEN TIPO_DOCUMENTO='TED'                 THEN 3
			ELSE 0 END AS COD_TIPODOC,
         COUNT(*) AS TOTAL,
         SUM(VALOR_FRAUDE) AS VALOR_FRAUDE FORMAT=COMMAX20.2
  FROM FRAUDE.OCORRENCIAFRAUDE
  WHERE SUBSTR(PROCESSO,INDEX(PROCESSO,'/')+1,4)='2020'
  GROUP BY TIPO_DOCUMENTO 
  ORDER BY COD_TIPODOC;
QUIT;



PROC SQL NOPRINT;
CREATE TABLE TEMP AS
SELECT TIPO_DOCUMENTO,TIPO_PESSOA,
       COUNT(*) AS TOTAL,SUM(VALOR_FRAUDE) AS VALOR_FRAUDE FORMAT=COMMAX20.2
FROM FRAUDE.OCORRENCIAFRAUDE
WHERE SUBSTR(PROCESSO,INDEX(PROCESSO,'/')+1,4)='2020'
GROUP BY TIPO_DOCUMENTO,TIPO_PESSOA

UNION 
SELECT '' AS TIPO_DOCUMENTO,'TOTAL' AS TIPO_PESSOA,
       COUNT(*) AS TOTAL,SUM(VALOR_FRAUDE) AS VALOR_FRAUDE FORMAT=COMMAX20.2
FROM FRAUDE.OCORRENCIAFRAUDE
WHERE SUBSTR(PROCESSO,INDEX(PROCESSO,'/')+1,4)='2020'
ORDER BY TIPO_DOCUMENTO,TIPO_PESSOA;
QUIT;


PROC SQL NOPRINT;
CREATE TABLE TEMP AS
SELECT TIPO_FRAUDE,
       COUNT(*) AS TOTAL,SUM(VALOR_FRAUDE) AS VALOR_FRAUDE FORMAT=COMMAX20.2
FROM FRAUDE.OCORRENCIAFRAUDE
WHERE ANO=2020 AND TIPO_PESSOA
GROUP BY TIPO_FRAUDE='Reclamante'

UNION 
SELECT 'TOTAL' AS TIPO_FRAUDE,
       COUNT(*) AS TOTAL,SUM(VALOR_FRAUDE) AS VALOR_FRAUDE FORMAT=COMMAX20.2
FROM FRAUDE.OCORRENCIAFRAUDE
WHERE ANO=2020 AND TIPO_PESSOA='Reclamante'
ORDER BY TIPO_FRAUDE;
QUIT;


/*----------dados do hue------------*/
/*  codtipofraude    total          */
/*     1             1131           */
/*     2             90             */
/*     4             1773           */
/*     7             9              */
/*     8             14             */
/*----------------------------------*/


/*--------------------------------------------------------------------------------*/
/*---          VARIÁVEL MACRO PARA A LISTA DE COOPERATIVAS ENVOLVIDAS          ---*/
/*--------------------------------------------------------------------------------*/

PROC SQL NOPRINT;
CREATE TABLE FCOOP AS
SELECT COOPERATIVA,
       COUNT(*) AS TOTAL,
       SUM(VALOR_FRAUDE) AS VALOR_FRAUDE FORMAT=COMMAX20.2
FROM FRAUDE.OCORRENCIAFRAUDE
WHERE SUBSTR(PROCESSO,INDEX(PROCESSO,'/')+1,4)='2020' AND TIPO_DOCUMENTO LIKE ('%TED%') AND TIPO_PESSOA='Reclamante'
GROUP BY COOPERATIVA
HAVING TOTAL>=4
ORDER BY TOTAL DESC;

SELECT DISTINCT COMPRESS(PUT(COOPERATIVA,4.)) INTO:COOP SEPARATED BY "," FROM FCOOP;
QUIT;
%PUT &COOP.;


/*--------------------------------------------------------------------------------*/
/*---           VARIÁVEL MACRO PARA LISTA DE CPFs/CNPJs ENVOLVIDOS             ---*/
/*--------------------------------------------------------------------------------*/

PROC SQL NOPRINT;
SELECT COMPRESS("'"||CPF_CNPJ||"'") INTO:CPF_CNPJ SEPARATED BY "," 
FROM FRAUDE.OCORRENCIAFRAUDE
WHERE SUBSTR(PROCESSO,INDEX(PROCESSO,'/')+1,4)='2020' AND TIPO_DOCUMENTO LIKE ('%TED%') 
    AND TIPO_PESSOA='Reclamante' AND COOPERATIVA IN (&COOP.);
QUIT;
%PUT &CPF_CNPJ.;


/*--------------------------------------------------------------------------------*/
/*---       TABELA BOLETO NOS MESES ANTERIOR (EM STAND-UP POR ENQUANTO)        ---*/
/*--------------------------------------------------------------------------------*/
/* DATE(DATE_TRUNC('MONTH',DT_MVM_DWM)) AS DT_MVM_DWM */

OPTIONS COMPRESS=YES;
PROC SQL;
CONNECT TO NETEZZA AS CON1(DATABASE=PRD_DWM SERVER=NTZP107 AUTHDOMAIN=NTZP110AUTH SQL_FUNCTIONS=ALL);
CREATE TABLE HISTORICO_MES AS 
SELECT *       
FROM CONNECTION TO CON1
  ( SELECT * ,
           LAG(VR_TRN_MES ,1,0) OVER(PARTITION BY NR_CPF_CNPJ ORDER BY MES) AS LAG_VALOR_MES1,
		   LAG(VR_TRN_MES ,2,0) OVER(PARTITION BY NR_CPF_CNPJ ORDER BY MES) AS LAG_VALOR_MES2,
		   LAG(VR_TRN_MES ,3,0) OVER(PARTITION BY NR_CPF_CNPJ ORDER BY MES) AS LAG_VALOR_MES3,
           LAG(QTD_MES    ,1,0) OVER(PARTITION BY NR_CPF_CNPJ ORDER BY MES) AS LAG_QUANT_MES1,
		   LAG(QTD_MES    ,2,0) OVER(PARTITION BY NR_CPF_CNPJ ORDER BY MES) AS LAG_QUANT_MES2,
		   LAG(QTD_MES    ,3,0) OVER(PARTITION BY NR_CPF_CNPJ ORDER BY MES) AS LAG_QUANT_MES3

    FROM
  ( SELECT NR_CPF_CNPJ,
           EXTRACT(MONTH FROM DH_TRN) AS MES,
           AVG(VR_TRN) AS VR_TRN_MES,
           COUNT(*) AS QTD_MES

      FROM TRANSACAO_PRODUTO
      WHERE DH_TRN BETWEEN '2019-10-01' AND '2020-10-01'
        AND CD_MDL_PRD=1 AND CD_PRD=3 AND NR_CPR_CNA IN (&COOP.) AND CD_NTZ_OPR='D' 
        AND CD_TRN IN (232,233,5237,5238,5240,5472,5473,5239,5241,5242)
	  GROUP BY NR_CPF_CNPJ,MES
	  ORDER BY NR_CPF_CNPJ,MES
         
    ) AS A
	)
ORDER BY NR_CPF_CNPJ,MES ;
DISCONNECT FROM CON1;
QUIT;



/*LEFT JOIN FIRMAS AS B ON A.NR_CPF_CNPJ=B.CPF_CNPJ AND A.DH_TRN=B.DATA_OCORRIDO*/
/*CASE WHEN VALOR_FRAUDE=VR_TRN THEN 1 ELSE 0 END AS FRAUDE*/
/*MONTHS_BETWEEN(DT_MVM_DWM,DT_NSC)/12 AS IDADE_ANO*/


/*--------------------------------------------------------------------------------*/
/*---                                RENDA                                     ---*/
/*--------------------------------------------------------------------------------*/

PROC SQL;
CONNECT TO NETEZZA AS CON1(DATABASE=PRD_DWM SERVER=NTZP107 AUTHDOMAIN=NTZP110AUTH SQL_FUNCTIONS=ALL);
CREATE TABLE RENDA AS 
SELECT * ,
        CASE WHEN NR_CPF_CNPJ IN (&CPF_CNPJ.) THEN 1 ELSE 0 END AS TRAT_FPSM,
		CASE WHEN LENGTH(NR_CPF_CNPJ)=11      THEN 1 ELSE 0 END AS TIPO,
        CASE WHEN RENDA_TOTAL>500             THEN RENDA_TOTAL ELSE 500 END AS RENDA_TOTAL2
FROM CONNECTION TO CON1
     (  SELECT NR_CPF_CNPJ,DT_MVM_DWM,SUM(VR_RND) AS RENDA_TOTAL
         FROM RENDA_PESSOA 
         WHERE DT_MVM_DWM BETWEEN '2020-01-01' AND '2020-11-01' /*AND NR_CPR_RSP_CDS IN (&COOP.)*/
         GROUP BY NR_CPF_CNPJ,DT_MVM_DWM
	   ) 
ORDER BY NR_CPF_CNPJ,DT_MVM_DWM;
DISCONNECT FROM CON1;
QUIT;

/*
PROC SQL;
CONNECT TO NETEZZA AS CON1(DATABASE=PRD_DWM SERVER=NTZP107 AUTHDOMAIN=NTZP110AUTH);
CREATE TABLE RENDA AS 
SELECT DISTINCT NR_CPF_CNPJ,RENDA_TOTAL,
                CASE WHEN NR_CPF_CNPJ IN (&CPF_CNPJ.) THEN 1 ELSE 0 END AS TRAT_FPSM,
                CASE WHEN LENGTH(NR_CPF_CNPJ)=11      THEN 1 ELSE 0 END AS TIPO,
                CASE WHEN RENDA_TOTAL>500             THEN RENDA_TOTAL ELSE 500 END AS RENDA_TOTAL2

FROM CONNECTION TO CON1
  ( SELECT *,MAX(DT_MVM_DWM) OVER(PARTITION BY NR_CPF_CNPJ) AS DATA_MAX 
    FROM  
     ( SELECT NR_CPF_CNPJ,DT_MVM_DWM,SUM(VR_RND) AS RENDA_TOTAL
	   FROM RENDA_PESSOA 
       WHERE DT_MVM_DWM BETWEEN '2020-01-01' AND '2020-10-31' AND NR_CPR_RSP_CDS IN (&COOP.)
	   GROUP BY NR_CPF_CNPJ,DT_MVM_DWM
	 ) AS A
     )
WHERE DT_MVM_DWM=DATA_MAX
ORDER BY NR_CPF_CNPJ;
DISCONNECT FROM CON1;
QUIT;
*/


/*--------------------------------------------------------------------------------*/
/*--       CRUZAMENTO DAS FRAUDES COM A TRANSAÇÃO PRODUTO PARA AVALIAÇÃO        --*/
/*--------------------------------------------------------------------------------*/

PROC SQL NOPRINT;
CREATE TABLE FRAUDES2020 AS
SELECT DISTINCT CPF_CNPJ AS NR_CPF_CNPJ,DATA_OCORRIDO,VALOR_FRAUDE
FROM FRAUDE.OCORRENCIAFRAUDE
WHERE SUBSTR(PROCESSO,INDEX(PROCESSO,'/')+1,4)='2020' AND TIPO_DOCUMENTO LIKE ('%TED%') 
     AND TIPO_PESSOA='Reclamante' AND COOPERATIVA IN (&COOP.)
ORDER BY CPF_CNPJ,DATA_OCORRIDO;
QUIT;



OPTIONS COMPRESS=YES;
PROC SQL;
CONNECT TO NETEZZA AS CON1(DATABASE=PRD_DWM SERVER=NTZP107 AUTHDOMAIN=NTZP110AUTH SQL_FUNCTIONS=ALL);
CREATE TABLE PLD.PFA_TRANSCAO_TED2020(COMPRESS=YES) AS 
SELECT DISTINCT A.NR_CPF_CNPJ,A.NR_CPR_CNA,A.VR_TRN,A.DT_MVM_DWM,A.DT_TRN,A.TIPO,A.TEMPO_CONTA,
       A.HORA,A.MES,A.QUIN,A.WEK,A.DIA,A.HOUR,A.DQTD5,A.DQTD15,A.DQTD30,A.DQTD60,
       CASE WHEN C.VR_TRN_MES=.        THEN 0 ELSE C.VR_TRN_MES          END AS VR_TRN_MES,
	   CASE WHEN C.LAG_VALOR_MES1=.    THEN 0 ELSE C.LAG_VALOR_MES1      END AS LAG_VALOR_MES1,
	   CASE WHEN C.LAG_VALOR_MES2=.    THEN 0 ELSE C.LAG_VALOR_MES2      END AS LAG_VALOR_MES2,
	   CASE WHEN C.LAG_VALOR_MES3=.    THEN 0 ELSE C.LAG_VALOR_MES3      END AS LAG_VALOR_MES3,
	   CASE WHEN C.QTD_MES=.           THEN 0 ELSE C.QTD_MES             END AS QTD_MES,
	   CASE WHEN C.LAG_QUANT_MES1=.    THEN 0 ELSE C.LAG_QUANT_MES1      END AS LAG_QUANT_MES1,
	   CASE WHEN C.LAG_QUANT_MES2=.    THEN 0 ELSE C.LAG_QUANT_MES2      END AS LAG_QUANT_MES2,
	   CASE WHEN C.LAG_QUANT_MES3=.    THEN 0 ELSE C.LAG_QUANT_MES3      END AS LAG_QUANT_MES3,
	   CASE WHEN D.RENDA_TOTAL>0       THEN 0 ELSE VR_TRN/D.RENDA_TOTAL  END AS TED_RENDA,
	   D.RENDA_TOTAL,D.RENDA_TOTAL2,VR_TRN/RENDA_TOTAL2   AS TED_RENDA2,
       CASE WHEN B.VALOR_FRAUDE=VR_TRN THEN 1 ELSE 0 END AS FRAUDE,
	   CASE WHEN A.NR_CPF_CNPJ IN (&CPF_CNPJ.) THEN 1 ELSE 0 END AS TRAT_FPSM,
       CASE WHEN LAG_QUANT_MES1>0 OR LAG_QUANT_MES2>0 THEN 1 ELSE 0 END AS DQTD_MES,
	   CASE WHEN A.TIPO=1 THEN SUBSTR(A.NR_CPF_CNPJ,5,2) ELSE SUBSTR(A.NR_CPF_CNPJ,7,2) END AS FATOR_SORTEIO,
	   CASE WHEN VR_TRN <=600    THEN 1
            WHEN VR_TRN <=1000   THEN 2
            WHEN VR_TRN <=2000   THEN 3
			WHEN VR_TRN <=3000   THEN 4
            WHEN VR_TRN <=5000   THEN 5
			WHEN VR_TRN <=5000   THEN 6
			WHEN VR_TRN <=10000  THEN 7
			WHEN VR_TRN <=15000  THEN 8
            WHEN VR_TRN <=20000  THEN 9
            WHEN VR_TRN <=25000  THEN 10
			WHEN VR_TRN <=30000  THEN 11
			WHEN VR_TRN <=40000  THEN 12
			WHEN VR_TRN <=50000  THEN 13
			WHEN VR_TRN <=60000  THEN 14
			WHEN VR_TRN <=70000  THEN 15
			WHEN VR_TRN <=80000  THEN 16
			WHEN VR_TRN  >80000  THEN 17
            ELSE 17 END AS CLASSE_VALOR

FROM CONNECTION TO CON1
  ( SELECT DISTINCT NR_CPF_CNPJ,NR_CPR_CNA,VR_TRN,DATE(DATE_TRUNC('MONTH',DH_TRN)) AS DT_MVM_DWM,
           DATE(DH_TRN) AS DT_TRN,DH_TRN,
           CASE WHEN LENGTH(NR_CPF_CNPJ)=11 THEN 1 ELSE 0 END AS TIPO,
           ROUND(MONTHS_BETWEEN(DATE(DH_TRN),DT_ABR)/12,0) AS TEMPO_CONTA,
           CASE WHEN EXTRACT(HOUR FROM DH_TRN)<6  THEN 1
                WHEN EXTRACT(HOUR FROM DH_TRN)<9  THEN 2
                WHEN EXTRACT(HOUR FROM DH_TRN)<12 THEN 3
                WHEN EXTRACT(HOUR FROM DH_TRN)<15 THEN 4
                WHEN EXTRACT(HOUR FROM DH_TRN)<18 THEN 5
                WHEN EXTRACT(HOUR FROM DH_TRN)<20 THEN 6
                ELSE 7 END AS HORA ,
			EXTRACT(MONTH   FROM DH_TRN) AS MES  ,
			EXTRACT(QUARTER FROM DH_TRN) AS QUIN ,
			EXTRACT(DOW     FROM DH_TRN) AS WEK  ,
			EXTRACT(DAY     FROM DH_TRN) AS DIA  ,
			EXTRACT(HOUR    FROM DH_TRN) AS HOUR ,
			LAG(DH_TRN,1) OVER(PARTITION BY NR_CPF_CNPJ,DATE(DH_TRN) ORDER BY DH_TRN) AS DH_LAG,
			CASE WHEN (EXTRACT(EPOCH FROM DH_TRN)-EXTRACT(EPOCH FROM DH_LAG))<300  AND 
                      (EXTRACT(EPOCH FROM DH_TRN)-EXTRACT(EPOCH FROM DH_LAG))>0    THEN 1 ELSE 0 END AS DQTD5 ,
			CASE WHEN (EXTRACT(EPOCH FROM DH_TRN)-EXTRACT(EPOCH FROM DH_LAG))<900  AND 
                      (EXTRACT(EPOCH FROM DH_TRN)-EXTRACT(EPOCH FROM DH_LAG))>0    THEN 1 ELSE 0 END AS DQTD15 ,
			CASE WHEN (EXTRACT(EPOCH FROM DH_TRN)-EXTRACT(EPOCH FROM DH_LAG))<1800 AND 
                      (EXTRACT(EPOCH FROM DH_TRN)-EXTRACT(EPOCH FROM DH_LAG))>0    THEN 1 ELSE 0 END AS DQTD30 ,
		    CASE WHEN (EXTRACT(EPOCH FROM DH_TRN)-EXTRACT(EPOCH FROM DH_LAG))<3600 AND 
                      (EXTRACT(EPOCH FROM DH_TRN)-EXTRACT(EPOCH FROM DH_LAG))>0    THEN 1 ELSE 0 END AS DQTD60

            FROM TRANSACAO_PRODUTO 
            WHERE DH_TRN BETWEEN '2020-01-01' AND '2020-10-01' AND CD_MDL_PRD=1 AND VR_TRN>=500 
              AND CD_PRD=3 AND NR_CPR_CNA IN (&COOP.) AND CD_NTZ_OPR='D' 
              AND CD_TRN IN (232,233,5237,5238,5240,5472,5473,5239,5241,5242) 
		  
        ) AS A 
LEFT JOIN FRAUDES2020    AS B ON A.NR_CPF_CNPJ=B.NR_CPF_CNPJ AND A.DT_TRN     = B.DATA_OCORRIDO
LEFT JOIN HISTORICO_MES  AS C ON A.NR_CPF_CNPJ=C.NR_CPF_CNPJ AND A.MES        = C.MES
LEFT JOIN RENDA          AS D ON A.NR_CPF_CNPJ=D.NR_CPF_CNPJ AND A.DT_MVM_DWM = D.DT_MVM_DWM;
DISCONNECT FROM CON1;
QUIT;
/*10,464,589*/
/*10,329,287*/



/*--------------------------------------------------------------------------------*/
/*--                     PREPARANDO BASE PARA AVALIAÇÃO                         --*/
/*--------------------------------------------------------------------------------*/
LIBNAME FRAUDE "/dados/PLD/Modelagem_Nas/Risco_de_Credito/Fraude";
OPTIONS COMPRESS=YES;

DATA FRAUDE.PFA_TRANSCAO_TED2020(COMPRESS=YES);
SET  PLD.PFA_TRANSCAO_TED2020;
IF TED_RENDA2 >=0.010 THEN CORTE_TEDRENDA_0=1;ELSE CORTE_TEDRENDA_0=0;
IF TED_RENDA2 >=0.025 THEN CORTE_TEDRENDA_1=1;ELSE CORTE_TEDRENDA_1=0;
IF TED_RENDA2 >=0.050 THEN CORTE_TEDRENDA_2=1;ELSE CORTE_TEDRENDA_2=0;
IF TED_RENDA2 >=0.100 THEN CORTE_TEDRENDA_3=1;ELSE CORTE_TEDRENDA_3=0;
IF TED_RENDA2 >=0.250 THEN CORTE_TEDRENDA_4=1;ELSE CORTE_TEDRENDA_4=0;
IF TED_RENDA2 >=0.500 THEN CORTE_TEDRENDA_5=1;ELSE CORTE_TEDRENDA_5=0;
IF TED_RENDA2 >=0.600 THEN CORTE_TEDRENDA_6=1;ELSE CORTE_TEDRENDA_6=0;
IF TED_RENDA2 >=0.700 THEN CORTE_TEDRENDA_7=1;ELSE CORTE_TEDRENDA_7=0;
IF TED_RENDA2 >=0.800 THEN CORTE_TEDRENDA_8=1;ELSE CORTE_TEDRENDA_8=0;
IF TED_RENDA2 >=0.900 THEN CORTE_TEDRENDA_9=1;ELSE CORTE_TEDRENDA_9=0;

IF LAG_QUANT_MES1<=20 THEN DQTD_MES=1;ELSE DQTD_MES=0;
IF MEAN(LAG_VALOR_MES1,LAG_VALOR_MES2,LAG_VALOR_MES3)>0 THEN VALOR_SOBRE_MES=VR_TRN/MEAN(LAG_VALOR_MES1,LAG_VALOR_MES2,LAG_VALOR_MES3);
ELSE VALOR_SOBRE_MES=0;

IF (TIPO=1 AND 3000<=VR_TRN<=80000) OR (TIPO=0 AND 10000<=VR_TRN<=95000) THEN DVALOR=1;ELSE DVALOR=0;
IF (TIPO=1 AND RENDA_TOTAL<=5000  ) OR (TIPO=0 AND RENDA_TOTAL<=33000  ) THEN DRENDA=1;ELSE DRENDA=0;
IF VALOR_SOBRE_MES>=3 THEN DHIST_MES=1;ELSE DHIST_MES=0;

     IF RENDA_TOTAL2<=500    THEN CRENDA=1;
ELSE IF RENDA_TOTAL2<=1500   THEN CRENDA=2;
ELSE IF RENDA_TOTAL2<=3000   THEN CRENDA=3;
ELSE IF RENDA_TOTAL2<=5000   THEN CRENDA=4;
ELSE IF RENDA_TOTAL2<=7500   THEN CRENDA=5;
ELSE IF RENDA_TOTAL2<=9500   THEN CRENDA=6;
ELSE IF RENDA_TOTAL2<=12000  THEN CRENDA=7;
ELSE IF RENDA_TOTAL2<=15000  THEN CRENDA=8;
ELSE IF RENDA_TOTAL2<=20000  THEN CRENDA=9;
ELSE IF RENDA_TOTAL2<=25000  THEN CRENDA=10;
ELSE IF RENDA_TOTAL2<=30000  THEN CRENDA=12;
ELSE IF RENDA_TOTAL2<=35000  THEN CRENDA=13;
ELSE IF RENDA_TOTAL2<=40000  THEN CRENDA=14;
ELSE IF RENDA_TOTAL2<=50000  THEN CRENDA=15;
ELSE IF RENDA_TOTAL2<=60000  THEN CRENDA=16;
ELSE IF RENDA_TOTAL2<=70000  THEN CRENDA=17;
ELSE IF RENDA_TOTAL2> 70000  THEN CRENDA=18;


     IF VR_TRN <=600   THEN CLASSE_VALOR=1;
ELSE IF VR_TRN <=1000  THEN CLASSE_VALOR=2;
ELSE IF VR_TRN <=2000  THEN CLASSE_VALOR=3;
ELSE IF VR_TRN <=3000  THEN CLASSE_VALOR=4;
ELSE IF VR_TRN <=5000  THEN CLASSE_VALOR=5;
ELSE IF VR_TRN <=7000  THEN CLASSE_VALOR=6;
ELSE IF VR_TRN <=10000 THEN CLASSE_VALOR=7;
ELSE IF VR_TRN <=15000 THEN CLASSE_VALOR=8;
ELSE IF VR_TRN <=20000 THEN CLASSE_VALOR=9;
ELSE IF VR_TRN <=25000 THEN CLASSE_VALOR=10;
ELSE IF VR_TRN <=30000 THEN CLASSE_VALOR=11;
ELSE IF VR_TRN <=40000 THEN CLASSE_VALOR=12;
ELSE IF VR_TRN <=50000 THEN CLASSE_VALOR=13;
ELSE IF VR_TRN <=60000 THEN CLASSE_VALOR=14;
ELSE IF VR_TRN <=70000 THEN CLASSE_VALOR=15;
ELSE IF VR_TRN <=80000 THEN CLASSE_VALOR=15;
ELSE IF VR_TRN  >80000 THEN CLASSE_VALOR=16;
RUN;


PROC FREQ DATA=FRAUDE.PFA_TRANSCAO_TED2020;
TABLE LAG_QUANT_MES1*FRAUDE / missing ;
RUN;

PROC MEANS DATA=FRAUDE.PFA_TRANSCAO_TED2020 MIN P25 MEDIAN P75 MAX MAXDEC=2;
CLASS TIPO FRAUDE;
VAR VALOR_SOBRE_MES;
RUN;

LIBNAME FRAUDE "/dados/PLD/Modelagem_Nas/Risco_de_Credito/Fraude";
OPTIONS COMPRESS=YES;
PROC MEANS DATA=FRAUDE.PFA_TRANSCAO_TED2020 P10 P25 P50 P75 P90 MAXDEC=1 NMISS NWAY;
CLASS TIPO FRAUDE;
VAR VR_TRN;
RUN;


PROC MEANS DATA=FRAUDE.PFA_TRANSCAO_TED2020 NOPRINT MAXDEC=1 NWAY;
CLASS NR_CPR_CNA FRAUDE TIPO;
OUTPUT OUT=NR_CPR_CNA(DROP=_TYPE_)
MIN(VR_TRN)=MIN_VR_TRN  P5(VR_TRN) =P05_VR_TRN P10(VR_TRN)=P10_VR_TRN
P25(VR_TRN)=P25_VR_TRN  P50(VR_TRN)=P50_VR_TRN P75(VR_TRN)=P75_VR_TRN
P95(VR_TRN)=P95_VR_TRN  P99(VR_TRN)=P99_VR_TRN MAX(VR_TRN)=MAX_VR_TRN;
RUN;



/*-----------------------------------------------------------------*/
/*- PRIMEIRO FILTRO DE VARIÁVEIS PARA CALCULAR LOGS E SQR         -*/
/*-----------------------------------------------------------------*/
LIBNAME FRAUDE "/dados/PLD/Modelagem_Nas/Risco_de_Credito/Fraude";
OPTIONS COMPRESS=YES;

PROC SQL NOPRINT;
CREATE TABLE TEMP0 AS
SELECT 'QTD' AS CRITERIO,FRAUDE,
       SUM(QTD_TIPO0) AS QTD_TIPO0,
	   SUM(QTD_TIPO1) AS QTD_TIPO1,
	   SUM(QTD_TIPO0)+SUM(QTD_TIPO1) AS TOTAL,
	   SUM(QTD_TIPO1)/(SUM(QTD_TIPO0)+SUM(QTD_TIPO1)) AS ASSERT
FROM (  SELECT FRAUDE,
             CASE WHEN TIPO=0 THEN COUNT(*) ELSE 0 END AS QTD_TIPO0,
	         CASE WHEN TIPO=1 THEN COUNT(*) ELSE 0 END AS QTD_TIPO1
        FROM FRAUDE.PFA_TRANSCAO_TED2020
        GROUP BY TIPO,FRAUDE )
GROUP BY FRAUDE
UNION
SELECT 'VALOR' AS CRITERIO,FRAUDE,
       SUM(VLR_TIPO0) AS QTD_TIPO0,
	   SUM(VLR_TIPO1) AS QTD_TIPO1,
	   SUM(VLR_TIPO0)+SUM(VLR_TIPO1) AS TOTAL,
	   SUM(VLR_TIPO1)/(SUM(VLR_TIPO0)+SUM(VLR_TIPO1)) AS ASSERT
FROM (  SELECT FRAUDE,
             CASE WHEN TIPO=0 THEN SUM(VR_TRN) ELSE 0 END AS VLR_TIPO0,
	         CASE WHEN TIPO=1 THEN SUM(VR_TRN) ELSE 0 END AS VLR_TIPO1
        FROM FRAUDE.PFA_TRANSCAO_TED2020
        GROUP BY TIPO,FRAUDE )
GROUP BY FRAUDE
ORDER BY CRITERIO,FRAUDE;
QUIT;




%MACRO TEDRENDA(VAR);
PROC SQL NOPRINT;
CREATE TABLE &VAR. AS
SELECT "&VAR." AS CRITERIO,FRAUDE,
       SUM(QTD_0) AS QTD_0,
	   SUM(QTD_1) AS QTD_1,
	   SUM(QTD_0)+SUM(QTD_1) AS TOTAL,
	   SUM(QTD_1)/(SUM(QTD_0)+SUM(QTD_1)) AS ASSERT
FROM (  SELECT FRAUDE,CASE WHEN &VAR.=0 THEN COUNT(*) ELSE 0 END AS QTD_0,
	                  CASE WHEN &VAR.=1 THEN COUNT(*) ELSE 0 END AS QTD_1
        FROM FRAUDE.PFA_TRANSCAO_TED2020
        GROUP BY &VAR.,FRAUDE )
GROUP BY FRAUDE
%MEND TEDRENDA;
%TEDRENDA(CORTE_TEDRENDA_0);
%TEDRENDA(CORTE_TEDRENDA_1);
%TEDRENDA(CORTE_TEDRENDA_2);
%TEDRENDA(CORTE_TEDRENDA_3);
%TEDRENDA(CORTE_TEDRENDA_4);
%TEDRENDA(CORTE_TEDRENDA_5);
%TEDRENDA(CORTE_TEDRENDA_6);
%TEDRENDA(CORTE_TEDRENDA_7);
%TEDRENDA(CORTE_TEDRENDA_8);
%TEDRENDA(CORTE_TEDRENDA_9);
%TEDRENDA(DQTD5);
%TEDRENDA(DQTD15);
%TEDRENDA(DQTD30);
%TEDRENDA(DQTD60);
%TEDRENDA(DVALOR);
%TEDRENDA(DRENDA);
%TEDRENDA(DHIST_MES);


DATA TEMP1;SET CORTE_TEDRENDA: D:;RUN;
PROC DELETE DATA=CORTE_TEDRENDA_0 -CORTE_TEDRENDA_9 DQTD5 DQTD_MES 
                 DQTD15 DQTD30 DQTD60 DVALOR DRENDA DHIST_MES;
RUN;



PROC MEANS DATA=RENDA NOPRINT MAXDEC=1 NWAY;
CLASS TIPO TRAT_FPSM;
OUTPUT OUT=TEMP2(DROP=_TYPE_) MIN(RENDA_TOTAL2)=MIN_VR_TRN P5 (RENDA_TOTAL2)=P05_RENDA P10(RENDA_TOTAL2)=P10_RENDA
                              P25(RENDA_TOTAL2)=P25_VR_TRN P50(RENDA_TOTAL2)=P50_RENDA P75(RENDA_TOTAL2)=P75_RENDA 
                              P95(RENDA_TOTAL2)=P95_VR_TRN P99(RENDA_TOTAL2)=P99_RENDA MAX(RENDA_TOTAL2)=MAX_RENDA ;
RUN;


PROC MEANS DATA=FRAUDE.PFA_TRANSCAO_TED2020 NOPRINT MAXDEC=1 NWAY;
CLASS TIPO FRAUDE;
OUTPUT OUT=TEMP3(DROP=_TYPE_) 
MIN(VALOR_SOBRE_MES)=MIN_VALOR_SOBRE_MES P5 (VALOR_SOBRE_MES)=P05_VALOR_SOBRE_MES P10(VALOR_SOBRE_MES)=P10_VALOR_SOBRE_MES
P25(VALOR_SOBRE_MES)=P25_VALOR_SOBRE_MES P50(VALOR_SOBRE_MES)=P50_VALOR_SOBRE_MES P75(VALOR_SOBRE_MES)=P75_VALOR_SOBRE_MES
P95(VALOR_SOBRE_MES)=P95_VALOR_SOBRE_MES P99(VALOR_SOBRE_MES)=P99_VALOR_SOBRE_MES MAX(VALOR_SOBRE_MES)=MAX_VALOR_SOBRE_MES;
RUN;



DATA FRAUDE.PFA_TRANSCAO_TED2020(COMPRESS=YES);SET FRAUDE.PFA_TRANSCAO_TED2020;
IF 1000<=VR_TRN<=50000 AND VALOR_SOBRE_MES>=2 AND DQTD5=0
AND HORA IN (2,3,4,5) AND WEK IN (2,3,4,5,6) THEN ALERTA1=1;ELSE ALERTA1=0;

IF 1000<=VR_TRN<=50000 AND VALOR_SOBRE_MES>=2 AND DQTD15=0 
AND HORA IN (2,3,4,5) AND WEK IN (2,3,4,5,6) THEN  ALERTA2=1;ELSE ALERTA2=0;

IF 1000<=VR_TRN<=50000 AND VALOR_SOBRE_MES>=3 AND DQTD5=0 
AND HORA IN (2,3,4,5) AND WEK IN (2,3,4,5,6 ) THEN ALERTA3=1;ELSE ALERTA3=0;

IF (5000<=VR_TRN<=45000 AND CORTE_TEDRENDA_0=1 AND HORA IN (2,3,4,5) AND WEK IN (2,3,4,5,6)) OR
   (5000<=VR_TRN<=45000 AND VALOR_SOBRE_MES>=3 AND HORA IN (2,3,4,5) AND WEK IN (2,3,4,5,6)) OR
   (5000<=VR_TRN<=45000 AND DQTD5=0            AND HORA IN (2,3,4,5) AND WEK IN (2,3,4,5,6)) THEN ALERTA4=1;ELSE ALERTA4=0;

IF (5000<=VR_TRN<=45000 AND CORTE_TEDRENDA_0=1 AND HORA IN (2,3,4,5) AND WEK IN (2,3,4,5,6)) OR
   (5000<=VR_TRN<=45000 AND VALOR_SOBRE_MES>=3 AND HORA IN (2,3,4,5) AND WEK IN (2,3,4,5,6)) OR
   (5000<=VR_TRN<=45000 AND DQTD30=0          AND HORA IN (2,3,4,5) AND WEK IN (2,3,4,5,6)) THEN ALERTA5=1;ELSE ALERTA5=0;

IF (8000<=VR_TRN<=45000 AND CORTE_TEDRENDA_0=1 AND HORA IN (2,3,4,5) AND WEK IN (2,3,4,5,6)) OR
   (1000<=VR_TRN<=45000 AND DQTD5=0            AND HORA IN (2,3,4,5) AND WEK IN (2,3,4,5,6)) THEN ALERTA6=1;ELSE ALERTA6=0;

IF (((TIPO=0 AND 8000<=VR_TRN<=60000) OR (TIPO=1 AND 5000<=VR_TRN<=45000)) 
    AND CORTE_TEDRENDA_0=1 AND HORA IN (2,3,4,5) AND WEK IN (2,3,4,5,6))  THEN ALERTA7=1;ELSE ALERTA7=0;

IF 1000<=VR_TRN<=50000 AND CORTE_TEDRENDA_0=1 AND DQTD15=0 
AND HORA IN (2,3,4,5) AND WEK IN (2,3,4,5,6)  THEN ALERTA8=1;ELSE ALERTA8=0;

IF 1000<=VR_TRN<=40000 AND CORTE_TEDRENDA_0=1 AND DQTD30=0 
AND HORA IN (2,3,4,5) AND WEK IN (2,3,4,5,6)  THEN ALERTA9=1;ELSE ALERTA9=0;

IF (((TIPO=0 AND 8000<=VR_TRN<=60000) OR (TIPO=1 AND 5000<=VR_TRN<=45000)) 
    AND CORTE_TEDRENDA_0=1 AND HORA IN (2,3,4,5) AND WEK IN (2,3,4,5,6)) OR
	(((TIPO=0 AND 8000<=VR_TRN<=60000) OR (TIPO=1 AND 5000<=VR_TRN<=45000)) 
    AND VALOR_SOBRE_MES>=2.5 AND HORA IN (2,3,4,5) AND WEK IN (2,3,4,5,6)) THEN ALERTA10=1;ELSE ALERTA10=0;

IF (((TIPO=0 AND 8000<=VR_TRN<=60000) OR (TIPO=1 AND 5000<=VR_TRN<=50000)) 
    AND CORTE_TEDRENDA_0=1 AND HORA IN (2,3,4,5) AND WEK IN (2,3,4,5,6)) AND VALOR_SOBRE_MES>=2.5 THEN ALERTA11=1;ELSE ALERTA11=0;

RUN;


%MACRO TEDRENDA(VAR);
PROC SQL NOPRINT;
CREATE TABLE &VAR. AS
SELECT "QTD:&VAR." AS CRITERIO,FRAUDE,
       SUM(QTD_0) AS QTD_0,
	   SUM(QTD_1) AS QTD_1,
	   SUM(QTD_0)+SUM(QTD_1) AS TOTAL,
	   SUM(QTD_1)/(SUM(QTD_0)+SUM(QTD_1)) AS ASSERT
FROM ( SELECT FRAUDE,
              CASE WHEN &VAR.=0 THEN COUNT(*) ELSE 0 END AS QTD_0,
	          CASE WHEN &VAR.=1 THEN COUNT(*) ELSE 0 END AS QTD_1
       FROM FRAUDE.PFA_TRANSCAO_TED2020
       GROUP BY &VAR.,FRAUDE )
GROUP BY FRAUDE
UNION
SELECT "VLR:&VAR." AS CRITERIO,FRAUDE,
       SUM(VLR_0) AS VLR_0,
	   SUM(VLR_1) AS VLR_1,
	   SUM(VLR_0)+SUM(VLR_1) AS TOTAL,
	   SUM(VLR_1)/(SUM(VLR_0)+SUM(VLR_1)) AS ASSERT
FROM ( SELECT FRAUDE,
              CASE WHEN &VAR.=0 THEN SUM(VR_TRN) ELSE 0 END AS VLR_0,
	          CASE WHEN &VAR.=1 THEN SUM(VR_TRN) ELSE 0 END AS VLR_1
       FROM FRAUDE.PFA_TRANSCAO_TED2020
       GROUP BY &VAR.,FRAUDE )
GROUP BY FRAUDE;
%MEND TEDRENDA;
%TEDRENDA(ALERTA1);
%TEDRENDA(ALERTA2);
%TEDRENDA(ALERTA3);
%TEDRENDA(ALERTA4);
%TEDRENDA(ALERTA5);
%TEDRENDA(ALERTA6);
%TEDRENDA(ALERTA7);
%TEDRENDA(ALERTA8);
%TEDRENDA(ALERTA9);
%TEDRENDA(ALERTA10);
%TEDRENDA(ALERTA11);


DATA TEMP5;SET ALERTA1-ALERTA11;RUN;
PROC DELETE DATA=ALERTA1-ALERTA11;RUN;



PROC SQL NOPRINT;
CREATE TABLE TEMP6 AS
SELECT TIPO,CLASSE_VALOR,
       SUM(QTD_0) AS QTD_0,
	   SUM(QTD_1) AS QTD_1,
	   SUM(QTD_0)+SUM(QTD_1) AS TOTAL
FROM (  SELECT TIPO,CLASSE_VALOR,
             CASE WHEN FRAUDE=0 THEN COUNT(*) ELSE 0 END AS QTD_0,
	         CASE WHEN FRAUDE=1 THEN COUNT(*) ELSE 0 END AS QTD_1
        FROM FRAUDE.PFA_TRANSCAO_TED2020
        GROUP BY CLASSE_VALOR,FRAUDE,TIPO )
GROUP BY CLASSE_VALOR,TIPO
ORDER BY TIPO,CLASSE_VALOR;
QUIT;



PROC SQL NOPRINT;
CREATE TABLE TEMP7 AS
SELECT TIPO,WEK,
       SUM(QTD_TIPO0) AS QTD_TIPO0,
	   SUM(QTD_TIPO1) AS QTD_TIPO1,
	   SUM(QTD_TIPO0)+SUM(QTD_TIPO1) AS TOTAL,
	   SUM(QTD_TIPO1)/(SUM(QTD_TIPO0)+SUM(QTD_TIPO1)) AS ASSERT
FROM (  SELECT TIPO,WEK,
             CASE WHEN FRAUDE=0 THEN COUNT(*) ELSE 0 END AS QTD_TIPO0,
	         CASE WHEN FRAUDE=1 THEN COUNT(*) ELSE 0 END AS QTD_TIPO1
        FROM FRAUDE.PFA_TRANSCAO_TED2020
        GROUP BY WEK,FRAUDE,TIPO )
GROUP BY WEK,TIPO
ORDER BY TIPO,WEK;
QUIT;


PROC SQL NOPRINT;
CREATE TABLE TEMP8 AS
SELECT TIPO,BRENDA,
       SUM(QTD_0) AS QTD_0,
	   SUM(QTD_1) AS QTD_1,
	   SUM(QTD_0)+SUM(QTD_1) AS TOTAL,
	   SUM(QTD_1)/(SUM(QTD_0)+SUM(QTD_1)) AS ASSERT
FROM (  SELECT TIPO,BRENDA,
             CASE WHEN FRAUDE=0 THEN COUNT(*) ELSE 0 END AS QTD_0,
	         CASE WHEN FRAUDE=1 THEN COUNT(*) ELSE 0 END AS QTD_1
        FROM FRAUDE.PFA_TRANSCAO_TED2020
        GROUP BY BRENDA,FRAUDE,TIPO )
GROUP BY BRENDA,TIPO
ORDER BY TIPO,BRENDA;
QUIT;


PROC SQL NOPRINT;
CREATE TABLE TEMP9 AS
SELECT TIPO,CRENDA,
       SUM(QTD_0) AS QTD_0,
	   SUM(QTD_1) AS QTD_1,
	   SUM(QTD_0)+SUM(QTD_1) AS TOTAL,
	   SUM(QTD_1)/(SUM(QTD_0)+SUM(QTD_1)) AS ASSERT
FROM (  SELECT TIPO,CRENDA,
             CASE WHEN FRAUDE=0 THEN COUNT(*) ELSE 0 END AS QTD_0,
	         CASE WHEN FRAUDE=1 THEN COUNT(*) ELSE 0 END AS QTD_1
        FROM FRAUDE.PFA_TRANSCAO_TED2020
        GROUP BY CRENDA,FRAUDE,TIPO )
GROUP BY CRENDA,TIPO
ORDER BY TIPO,CRENDA;
QUIT;



PROC FREQ DATA=PFA_TRANSCAO_TED2020;
TABLE (ALERTA1-ALERTA9)*FRAUDE / NOPERCENT;
RUN;

PROC FREQ DATA=PFA_TRANSCAO_TED2020;
TABLE (CORTE_TEDRENDA_Z CORTE_TEDRENDA_K CORTE_TEDRENDA_Y CORTE_TEDRENDA_W CORTE_TEDRENDA_O)*FRAUDE / NOPERCENT;
RUN;



PROC SQL NOPRINT;
CREATE TABLE TEMP10 AS
SELECT TIPO,WEK,
       SUM(QTD_TIPO0) AS QTD_TIPO0,
	   SUM(QTD_TIPO1) AS QTD_TIPO1,
	   SUM(QTD_TIPO0)+SUM(QTD_TIPO1) AS TOTAL,
	   SUM(QTD_TIPO1)/(SUM(QTD_TIPO0)+SUM(QTD_TIPO1)) AS ASSERT
FROM (  SELECT TIPO,WEK,
             CASE WHEN FRAUDE=0 THEN COUNT(*) ELSE 0 END AS QTD_TIPO0,
	         CASE WHEN FRAUDE=1 THEN COUNT(*) ELSE 0 END AS QTD_TIPO1
        FROM FRAUDE.PFA_TRANSCAO_TED2020
        GROUP BY WEK,FRAUDE,TIPO )
GROUP BY WEK,TIPO
ORDER BY TIPO,WEK;
QUIT;



PROC SQL NOPRINT;
CREATE TABLE TEMP11 AS
SELECT TIPO,HORA,
       SUM(QTD_TIPO0) AS QTD_TIPO0,
	   SUM(QTD_TIPO1) AS QTD_TIPO1,
	   SUM(QTD_TIPO0)+SUM(QTD_TIPO1) AS TOTAL,
	   SUM(QTD_TIPO1)/(SUM(QTD_TIPO0)+SUM(QTD_TIPO1)) AS ASSERT
FROM (  SELECT TIPO,HORA,
             CASE WHEN FRAUDE=0 THEN COUNT(*) ELSE 0 END AS QTD_TIPO0,
	         CASE WHEN FRAUDE=1 THEN COUNT(*) ELSE 0 END AS QTD_TIPO1
        FROM FRAUDE.PFA_TRANSCAO_TED2020
        GROUP BY HORA,FRAUDE,TIPO )
GROUP BY HORA,TIPO
ORDER BY TIPO,HORA;
QUIT;




/*--------------------------------------------------------------------------------*/
/*--          VERIFICAÇÃO FRACASSADA DO CRIADOR DA TABELAS EM PLD               --*/
/*--------------------------------------------------------------------------------*/
LIBNAME FRAUDE "/dados/PLD/Modelagem_Nas/Risco_de_Credito/Fraude";
OPTIONS COMPRESS=YES;

PROC CONTENTS DATA=FRAUDE.PFA_TRANSCAO_TED2020 NOPRINT OUT=C(KEEP=NAME);
RUN;

DATA FRAUDE.PFA_TRANSCAO_TED2020X(COMPRESS=YES);
SET  FRAUDE.PFA_TRANSCAO_TED2020(WHERE=(TRAT_FPSM=1 OR FATOR_SORTEIO IN ('00'));
DROP CLASSE_VALOR DQTD_MES DT_TRN LAG_QUANT_MES1 RENDA_TOTAL2 DIA VR_TRN_MES
     LAG_QUANT_MES2 LAG_QUANT_MES3 LAG_VALOR_MES1 LAG_VALOR_MES2 LAG_VALOR_MES3 ;
RUN;


PROC FREQ DATA=FRAUDE.PFA_TRANSCAO_TED2020;
TABLE FATOR_SORTEIO ;
RUN;




